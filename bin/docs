#!/usr/bin/env python3
# This file is placed in the Public Domain.


"create docs"


import os
import subprocess
import sys


NAME = "otpcr"
curdir = os.getcwd()

TXT = '''
#
# This file is autogenerated by pip-compile with Python 3.11
# by the following command:
#
#    pip-compile docs/requirements.in
#
alabaster==0.7.13
    # via sphinx
babel==2.12.1
    # via sphinx
certifi==2023.7.22
    # via requests
charset-normalizer==3.1.0
    # via requests
docutils==0.20.1
    # via sphinx
idna==3.4
    # via requests
imagesize==1.4.1
    # via sphinx
jinja2==3.1.2
    # via sphinx
markupsafe==2.1.3
    # via jinja2
packaging==23.1
    # via sphinx
pygments==2.15.1
    # via sphinx
requests==2.31.0
    # via sphinx
snowballstemmer==2.2.0
    # via sphinx
sphinx==7.0.1
    # via -r docs/requirements.in
sphinxcontrib-applehelp==1.0.4
    # via sphinx
sphinxcontrib-devhelp==1.0.2
    # via sphinx
sphinxcontrib-htmlhelp==2.0.1
    # via sphinx
sphinxcontrib-jsmath==1.0.1
    # via sphinx
sphinxcontrib-qthelp==1.0.3
    # via sphinx
sphinxcontrib-serializinghtml==1.1.5
    # via sphinx
urllib3==2.0.3
    # via requests
'''


curdir = os.getcwd()


os.environ["PATH"] = ":./bin" + os.environ["PATH"]


def popen(txt):
    "run commands on splitted string."
    with subprocess.Popen(
                            txt.split(),
                            stdin=sys.stdin,
                            stdout=sys.stdout,
                            stderr=sys.stderr,
                            close_fds=False,
                            text=True
                           ) as proc:
        proc.communicate()
        proc.wait()


def popen2(txt):
    "run commands on plain txt"
    proc = subprocess.Popen(
                            txt,
                            stdin=sys.stdin,
                            stdout=sys.stdout,
                            stderr=sys.stderr,
                            close_fds=False,
                            shell=True,
                            text=True
                           )
    proc.communicate()
    proc.wait()


if not os.path.exists("env"):
    popen("python3 -mvirtualenv env")
    popen(f"env/bin/pip3 install {NAME} -f dist --upgrade --force")
    popen2("env/bin/python3 env/bin/pip3 install -I %s" % " ".join([f"{x}" for x in TXT.split("\n") if "#" not in x]))


popen("env/bin/sphinx-build docs html")
